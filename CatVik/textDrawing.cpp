#include "textDrawing.h"
#include "vec2.h"
#include <string>


//Symbols:
//A B C D E F G H I J K L M N O P Q R S T U V W X Y Z  [0...25]
// [ ] . ! ? + - * / ' : [26...37]
// 0 1 2 3 4 5 6 7 8 9 [38...47]
//The magical 48 is an empty space... How sweet.

const bool charPixel[48][5][5] = { {
		{0, 0, 1, 0, 0},
		{0, 1, 0, 1, 0},
		{0, 1, 1, 1, 0},
		{1, 0, 0, 0, 1},
		{1, 0, 0, 0, 1}
		//A  0
	}, {
		{1, 1, 1, 1, 0},
		{1, 0, 0, 0, 1},
		{1, 1, 1, 1, 1},
		{1, 0, 0, 0, 1},
		{1, 1, 1, 1, 0}
		//B  1
	}, {
		{1, 1, 1, 1, 0},
		{1, 0, 0, 0, 0},
		{1, 0, 0, 0, 0},
		{1, 0, 0, 0, 0},
		{1, 1, 1, 1, 0}
		//C  2
	}, {
		{1, 1, 1, 1, 0},
		{1, 0, 0, 0, 1},
		{1, 0, 0, 0, 1},
		{1, 0, 0, 0, 1},
		{1, 1, 1, 1, 0}
		//D  3
	}, {
		{1, 1, 1, 1, 1},
		{1, 0, 0, 0, 0},
		{1, 1, 1, 1, 0},
		{1, 0, 0, 0, 0},
		{1, 1, 1, 1, 1}
		//E  4
	}, {
		{1, 1, 1, 1, 0},
		{1, 0, 0, 0, 0},
		{1, 1, 1, 0, 0},
		{1, 0, 0, 0, 0},
		{1, 0, 0, 0, 0}
		//F  5
	}, {
		{0, 1, 1, 1, 1},
		{1, 0, 0, 0, 0},
		{1, 0, 1, 1, 1},
		{1, 0, 0, 0, 1},
		{0, 1, 1, 1, 0}
		//G  6
	}, {
		{1, 0, 0, 0, 1},
		{1, 0, 0, 0, 1},
		{1, 1, 1, 1, 1},
		{1, 0, 0, 0, 1},
		{1, 0, 0, 0, 1}
		//H  7
	}, {
		{0, 1, 1, 1, 0},
		{0, 0, 1, 0, 0},
		{0, 0, 1, 0, 0},
		{0, 0, 1, 0, 0},
		{0, 1, 1, 1, 0}
		//I  8
	}, {
		{0, 0, 0, 1, 0},
		{0, 0, 0, 1, 0},
		{0, 0, 0, 1, 0},
		{0, 1, 0, 1, 0},
		{0, 0, 1, 0, 0}
		//J  9
	}, {
		{1, 0, 0, 1, 0},
		{1, 0, 1, 0, 0},
		{1, 1, 0, 0, 0},
		{1, 0, 1, 0, 0},
		{1, 0, 0, 1, 0}
		//K  10
	}, {
		{0, 1, 0, 0, 0},
		{0, 1, 0, 0, 0},
		{0, 1, 0, 0, 0},
		{0, 1, 0, 0, 0},
		{0, 1, 1, 1, 0}
		//L  11
	}, {
		{1, 0, 0, 0, 1},
		{1, 1, 0, 1, 1},
		{1, 0, 1, 0, 1},
		{1, 0, 0, 0, 1},
		{1, 0, 0, 0, 1}
		//M  12
	}, {
		{1, 0, 0, 0, 1},
		{1, 1, 0, 0, 1},
		{1, 0, 1, 0, 1},
		{1, 0, 0, 1, 1},
		{1, 0, 0, 0, 1}
		//N  13
	}, {
		{0, 1, 1, 1, 0},
		{1, 0, 0, 0, 1},
		{1, 0, 0, 0, 1},
		{1, 0, 0, 0, 1},
		{0, 1, 1, 1, 0}
		//O  14
	}, {
		{1, 1, 1, 0, 0},
		{1, 0, 0, 1, 0},
		{1, 1, 1, 0, 0},
		{1, 0, 0, 0, 0},
		{1, 0, 0, 0, 0}
		//P  15
	}, {
		{1, 1, 1, 1, 0},
		{1, 0, 0, 1, 0},
		{1, 0, 1, 1, 0},
		{1, 1, 1, 1, 1},
		{0, 0, 0, 1, 1}
		//Q  16
	}, {
		{0, 1, 1, 0, 0},
		{1, 0, 0, 1, 0},
		{1, 1, 1, 0, 0},
		{1, 0, 0, 1, 0},
		{1, 0, 0, 0, 1}
		//R  17
	}, {
		{0, 1, 1, 1, 0},
		{1, 0, 0, 0, 0},
		{0, 1, 1, 1, 0},
		{0, 0, 0, 0, 1},
		{0, 1, 1, 1, 0}
		//S  18
	}, {
		{1, 1, 1, 1, 1},
		{0, 0, 1, 0, 0},
		{0, 0, 1, 0, 0},
		{0, 0, 1, 0, 0},
		{0, 0, 1, 0, 0}
		//T  19
	}, {
		{1, 0, 0, 0, 1},
		{1, 0, 0, 0, 1},
		{1, 0, 0, 0, 1},
		{1, 0, 0, 0, 1},
		{0, 1, 1, 1, 0}
		//U  20
	}, {
		{1, 0, 0, 0, 1},
		{1, 0, 0, 0, 1},
		{0, 1, 0, 1, 0},
		{0, 1, 0, 1, 0},
		{0, 0, 1, 0, 0}
		//V  21
	}, {
		{0, 0, 0, 0, 0},
		{1, 0, 0, 0, 1},
		{1, 0, 1, 0, 1},
		{1, 0, 1, 0, 1},
		{0, 1, 0, 1, 0}
		//W  22
	}, {
		{1, 0, 0, 0, 1},
		{0, 1, 0, 1, 0},
		{0, 0, 1, 0, 0},
		{0, 1, 0, 1, 0},
		{1, 0, 0, 0, 1}
		//X  23
	}, {
		{1, 0, 0, 0, 1},
		{1, 0, 0, 0, 1},
		{0, 1, 0, 1, 0},
		{0, 0, 1, 0, 0},
		{0, 0, 1, 0, 0}
		//Y  24
	}, {
		{1, 1, 1, 1, 1},
		{0, 0, 0, 0, 1},
		{0, 1, 1, 1, 0},
		{1, 0, 0, 0, 0},
		{1, 1, 1, 1, 1}
		//Z  25
	}, {
		{1, 1, 0, 0, 0},
		{1, 0, 0, 0, 0},
		{1, 0, 0, 0, 0},
		{1, 0, 0, 0, 0},
		{1, 1, 0, 0, 0}
		//[  26
	}, {
		{0, 0, 0, 1, 1},
		{0, 0, 0, 0, 1},
		{0, 0, 0, 0, 1},
		{0, 0, 0, 0, 1},
		{0, 0, 0, 1, 1}
		//]  27
	}, {
		{0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0},
		{0, 0, 1, 0, 0}
		//.  28
	}, {
		{0, 0, 1, 0, 0},
		{0, 0, 1, 0, 0},
		{0, 0, 1, 0, 0},
		{0, 0, 0, 0, 0},
		{0, 0, 1, 0, 0}
		//!  29
	}, {
		{0, 1, 1, 0, 0},
		{0, 0, 0, 1, 0},
		{0, 0, 1, 0, 0},
		{0, 0, 0, 0, 0},
		{0, 0, 1, 0, 0}
		//?  30
	}, {
		{0, 0, 0, 0, 0},
		{0, 0, 1, 0, 0},
		{0, 1, 1, 1, 0},
		{0, 0, 1, 0, 0},
		{0, 0, 0, 0, 0}
		// +  31
	}, {
		{0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0},
		{0, 1, 1, 1, 0},
		{0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0}
		// -  32
	}, {
		{0, 0, 0, 0, 0},
		{0, 1, 0, 1, 0},
		{0, 0, 1, 0, 0},
		{0, 1, 0, 1, 0},
		{0, 0, 0, 0, 0}
		// *  33
	}, {
		{0, 0, 0, 0, 1},
		{0, 0, 0, 1, 0},
		{0, 0, 1, 0, 0},
		{0, 1, 0, 0, 0},
		{1, 0, 0, 0, 0}
		// /  34
	}, {
		{0, 0, 0, 0, 0},
		{0, 0, 1, 0, 0},
		{0, 0, 1, 0, 0},
		{0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0}
		// '  35
	}, {
		{0, 0, 0, 0, 0},
		{0, 0, 1, 0, 0},
		{0, 0, 0, 0, 0},
		{0, 0, 1, 0, 0},
		{0, 0, 0, 0, 0}
		// :  36
	}, {
		{ 0, 0, 0, 0, 0 },
		{ 0, 1, 0, 0, 0 },
		{ 1, 0, 1, 0, 1 },
		{ 0, 0, 0, 1, 0 },
		{ 0, 0, 0, 0, 0 }
		// ~  37
	}, {
		{1, 1, 1, 1, 1},
		{1, 0, 0, 0, 1},
		{1, 0, 1, 0, 1},
		{1, 0, 0, 0, 1},
		{1, 1, 1, 1, 1}
		//0  37
	}, {
		{0, 0, 1, 0, 0},
		{0, 1, 1, 0, 0},
		{0, 0, 1, 0, 0},
		{0, 0, 1, 0, 0},
		{1, 1, 1, 1, 1}
		//1  38
	}, {
		{0, 1, 1, 0, 0},
		{1, 0, 0, 1, 0},
		{0, 0, 1, 0, 0},
		{0, 1, 0, 0, 0},
		{1, 1, 1, 1, 0}
		//2  39
	}, {
		{0, 1, 1, 1, 0},
		{0, 0, 0, 0, 1},
		{0, 1, 1, 1, 0},
		{0, 0, 0, 0, 1},
		{0, 1, 1, 1, 0}
		//3  40
	}, {
		{0, 1, 0, 1, 0},
		{0, 1, 0, 1, 0},
		{0, 1, 1, 1, 0},
		{0, 0, 0, 1, 0},
		{0, 0, 0, 1, 0}
		//4  41
	}, {
		{0, 1, 1, 1, 0},
		{0, 1, 0, 0, 0},
		{0, 1, 1, 0, 0},
		{0, 0, 0, 1, 0},
		{0, 1, 1, 0, 0}
		//5  42
	}, {
		{0, 1, 1, 1, 0},
		{0, 1, 0, 0, 0},
		{0, 1, 1, 1, 0},
		{0, 1, 0, 1, 0},
		{0, 1, 1, 1, 0}
		//6  43
	}, {
		{0, 1, 1, 1, 0},
		{0, 0, 0, 1, 0},
		{0, 0, 1, 0, 0},
		{0, 1, 0, 0, 0},
		{0, 1, 0, 0, 0}
		//7  44
	}, {
		{0, 1, 1, 1, 0},
		{0, 1, 0, 1, 0},
		{0, 1, 1, 1, 0},
		{0, 1, 0, 1, 0},
		{0, 1, 1, 1, 0}
		//8  45
	}, {
		{0, 1, 1, 1, 0},
		{0, 1, 0, 1, 0},
		{0, 1, 1, 1, 0},
		{0, 0, 0, 1, 0},
		{0, 1, 1, 1, 0}
		//9  46
	}

};


//Translates an ASCII character to an index for charPixel.
short translateChar(char symb) {
	if (symb >= 'a'&&symb <= 'z') {
		return symb - 'a';
	}
	if (symb >= 'A'&&symb <= 'Z') {
		return symb - 'A';
	}
	if (symb >= '0'&&symb <= '9') {
		return symb - '0'+38;
	}
	switch (symb) {
		case '[': return 26; break;
		case '(': return 26; break;
		case '{': return 26; break;

		case ']': return 27; break;
		case ')': return 27; break;
		case '}': return 27; break;

		case '.': return 28; break;

		case '!': return 29; break;

		case '?': return 30; break;

		case '+': return 31; break;

		case '-': return 32; break;

		case '*': return 33; break;

		case '/': return 34; break;

		case '\'': return 35; break;

		case ':': return 36; break;

		case '~': return 37; break;

		case ' ': return 48; break;
	}

	return 30; // Returns a question mark ( ? )
}

//A single letter is [0;1] x and [0;1] y
// n letters are [0;n] x and [0;1] y
bool sampleText(vec2 pos, std::string text) {
	if (pos.x<0.0 || pos.x>text.size() || pos.y > 1. || pos.y < 0.0) return false;
	int index = int(pos.x);
	pos.x -= double(index);
	//Coordinates of the pixel in the pixelChar array.
	if (translateChar(text[index]) == 48) return 0;
	return charPixel [translateChar(text[index])] [int(pos.y*5.0)] [int(pos.x*5.0)];
	
}

